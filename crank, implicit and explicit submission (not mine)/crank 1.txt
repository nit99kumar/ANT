// PROGRAM TO SOLVE A PDE BY CRANK NICOLSON METHOD

#include <stdio.h>
#include <math.h>
#define SIZE 25

void thomas(float X[SIZE], float A[SIZE], float B[SIZE], float C[SIZE], float D[SIZE], int d_x)
{
	int i;
	int n = d_x;

  	C[1] = C[1]/B[1];
   D[1] = D[1]/B[1];
  
  	for(i=2;i<n-1;i++)
  	{
		C[i] = C[i] / (B[i] - A[i]*C[i-1]);
	  	D[i] = (D[i] - A[i]*D[i-1]) / (B[i] - A[i]*C[i-1]);
	}
	
 	D[n-1] = (D[n-1] - A[n-1]*D[n-2]) / (B[n-1] - A[n-1]*C[n-2]);
	X[n-1] = D[n-1];
	 	
	for(i=n-2;i>=1;i--)
		X[i] = D[i] - (C[i]*X[i+1]) ;  

}

int main()
{
	int i,j;
	int d_x,d_t,delta_t,delta_x;
	float r;
	float U[SIZE][2*SIZE];
	float A[SIZE], B[SIZE], C[SIZE], D[SIZE];
	float X[SIZE];

	printf("Program to solve a PDE by Crank Nicolson Method.\n\n");
	printf("The equation is :\n");
	printf("u' (w.r.to t) = 4 u'' (w.r.to x)\n\n");

	printf("Initial condition : u(x,0) = 4x - x*x \n");
	printf("Boundary Conditions : u(0,t) = u(8,t) = 0.\n");
	printf("Given 0 <= x <= 8. \n\n");

	delta_x = 1;
	delta_t = 1;
	d_x = 8;
	d_t = 2;

	r = (4*(delta_t))/((delta_x)*(delta_x)*2);
	
	U[0][0] = 0;
	for(i=1;i<d_x;i++)
		U[i][0] = 4*i - (float)(i*i)/2; 
	U[d_x][0] = 0;

	printf("The Crank Nicolson equation to solve above PDE is :\n");
	printf("-r*U[i+1][n+1] + (1+2r)*U[i][n+1] - r*U[i-1][n+1] = r*(U[i+1][n] + U[i-1][n]) + (1-2r)*U[i][n]. \n\n");

	for(j=1;j<=d_t;j++)
	{
		U[0][j] = 0;
		U[d_x][j] = 0;

		A[1] = 0;
		B[1] = (1+2*r);
		C[1] = (-1)*r;
		D[1] = (1-2*r)*U[1][j-1] + r*(U[0][j] + U[0][j-1] + U[2][j-1]);

		for(i=2;i<d_x-1;i++)
		{
			A[i] = (-1)*r;
			B[i] = (1+2*r);
			C[i] = (-1)*r;
			D[i] = r*(U[i+1][j-1] + U[i-1][j-1]) + (1 - 2*r)*U[i][j-1];
		}

		A[d_x-1] = (-1)*r;
		B[d_x-1] = (1+2*r);
		C[d_x-1] = 0;
		D[d_x-1] = (1-2*r)*U[d_x-1][j-1] + r*(U[d_x-1][j] + U[d_x-2][j-1] + U[d_x][j-1]);

 		thomas(X,A,B,C,D,d_x);

		for(i=1;i<d_x;i++)
			U[i][j] = X[i];
	} 

	for(j=0;j<=d_t;j++)
	{
		printf("Solution at t = %f is : \n",j/(float)d_t);  
		for(i=0;i<=d_x;i++)
			printf("U[%d] = %f\n",i,U[i][j]);
		printf("\n");
	}
	
	return 0;
}
